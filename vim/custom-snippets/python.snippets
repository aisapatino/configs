snippet super "super call" w
super(${1:CLASS}, self).${2:method}(${3})
endsnippet

snippet log "logger defining"
import logging
logger = logging.getLogger('${1:NAME}')

endsnippet

snippet init "basic init function"
def __init__(self, *args, **kwargs):
	super(${1:CLASS}, self).__init__(*args, **kwargs)
endsnippet

#------------------------------------------------------------------------------
# MODELS/CLASSES
#------------------------------------------------------------------------------

snippet model "basic model outline" bs
class ${1:CLASSNAME}(models.Model):


	def __unicode__(self):
		return self.${2:FIELDNAME}
endsnippet


snippet fk "foreignkey"
	${1:FIELD} = models.ForeignKey(${2:MODEL})

endsnippet

snippet pos "positiveintegerfield"
	${1:FIELD} = models.PositiveIntegerField(default=0)

endsnippet

snippet bool "booleanfield"
	${1:FIELD} = models.BooleanField(blank=True, default=False)

endsnippet

snippet many "manytomanyfield"
	${1:FIELD} = models.ManyToManyField(${2:MODEL}, through='${3:THROUGH}', blank=True)

endsnippet

snippet datef "datetimefield"
	${1:FIELD} = models.DateTimeField()

endsnippet

#------------------------------------------------------------------------------
# ADMIN
#------------------------------------------------------------------------------

snippet madmin "model admin outline"
class ${1:MODEL_NAME}A(admin.ModelAdmin):
	list_display = ()
	list_filter = ()
	exclude = ()
	fields = ()
	readonly_fields = ()

endsnippet

#------------------------------------------------------------------------------
# TESTS
#------------------------------------------------------------------------------

snippet timp "common test imports"
from django.core.urlresolvers import reverse

import unittest

from ${1:BASE_APP}.tests import ${2:BASE_TEST_CLASS}

endsnippet

snippet ctest "outline of a test class" bs
class ${1:NAME}(${2:BASE}):

	url = reverse('${3:VIEW}')

	def setUp(self):
		super($1, self).setUp()

endsnippet

snippet ftc "fundraising test class"
class ${1:NAME}(BaseFundTestCase):

	url = reverse('sjfnw.fund.views.${2:VIEW}')

	def setUp(self):
		super($1, self).setUp()

endsnippet

snippet test "outline of a text func" s
def test_${1:DESC}(self):
	""" Verify ${2:WHAT} """

endsnippet

snippet tidea "placeholder for future test" s
@unittest.skip('Incomplete')
def test_${1:DESC}(self):
	""" Verify ${2:DESC} """
	pass

endsnippet

snippet tpost "test post"
response = self.client.post(${1:self.url}, ${2:DATA}, follow=True)
endsnippet

snippet tget "test get"
response = self.client.get(${1:self.url}, follow=True)
endsnippet

snippet at "assertTemplateUsed"
self.assertTemplateUsed(response, '${1:path}.html')
endsnippet

snippet eq "assertEqual"
self.assertEqual(${1}, ${2})
endsnippet

snippet ac "assertContains"
self.assertContains(${2:response}, '${1}')
endsnippet

snippet con "get response context"
ctx = response.context
endsnippet

snippet var "specific response context variable" w
response.context['${1}']
endsnippet

snippet formerr "get form errors"
errors = response.context['form'].errors
endsnippet

# COMMANDS

snippet command "imports and outline of command class"
from django.core.management import call_command
from django.core.management.base import BaseCommand
from django.conf import settings

from ${1:APP} import ${2:MODELS}

class Command(BaseCommand):

	help = ('${3:DESCRIPTION}')

	def handle(self, *args, **kwargs):
		pass

endsnippet

snippet wr "self.stdout.write"
self.stdout.write('${1:CONTENT}')
endsnippet

snippet ewr "self.stderr.write"
self.stderr.write('${1:CONTENT}')
endsnippet

