snippet super "super call" w
super(${1:CLASS}, self).${2:METHOD}($3)
endsnippet

snippet log "logger defining"
import logging
logger = logging.getLogger('${1:NAME}')

endsnippet

snippet init "basic init function"
def __init__(self, *args, **kwargs):
	super(${1:CLASS}, self).__init__(*args, **kwargs)
endsnippet

#------------------------------------------------------------------------------
# MODELS/CLASSES
#------------------------------------------------------------------------------

snippet model "basic model outline" bs
class ${1:CLASSNAME}(models.Model):
$3
	def __unicode__(self):
		return self.${2:FIELDNAME}
endsnippet

snippet fk "foreignkey"
	${1:FIELD} = models.ForeignKey(${2:MODEL})

endsnippet

snippet pos "positiveintegerfield"
	${1:FIELD} = models.PositiveIntegerField(default=0)

endsnippet

snippet bool "booleanfield"
	${1:FIELD} = models.BooleanField(blank=True, default=False)

endsnippet

snippet many "manytomanyfield"
	${1:FIELD} = models.ManyToManyField(${2:MODEL}, through='${3:THROUGH}', blank=True)

endsnippet

snippet datef "datetimefield"
	${1:FIELD} = models.DateTimeField()

endsnippet

# QUERYSETS

snippet mget "model get" w
models.${2:Model}.objects.get(${4:pk=}$3)
endsnippet

#------------------------------------------------------------------------------
# ADMIN
#------------------------------------------------------------------------------

snippet madmin "model admin outline"
class ${1:MODEL_NAME}A(admin.ModelAdmin):
	list_display = ()
	list_filter = ()
	exclude = ()
	fields = ()
	readonly_fields = ()

endsnippet

#------------------------------------------------------------------------------
# TESTS
#------------------------------------------------------------------------------

snippet timp "common test imports"
from django.core.urlresolvers import reverse

import unittest

from ${1:BASE_APP}.tests import ${2:BASE_TEST_CLASS}

endsnippet

snippet ctest "outline of a test class" bs
class ${1:NAME}(${2:BASE}):

	url = reverse('${3:VIEW}')

	def setUp(self):
		super($1, self).setUp()

endsnippet

snippet tpost "test post"
res = self.client.post(${1:self.url}, ${2:DATA})
endsnippet

snippet tget "test get"
res = self.client.get(${1:self.url})
endsnippet

snippet ae "assertEqual"
self.assertEqual($1, $2)
endsnippet

snippet ane "assertNotEqual"
self.assertNotEqual($1, $2)
endsnippet

snippet at "assertTrue"
self.assertTrue($1)
endsnippet

snippet af "assertFalse"
self.assertFalse($1)
endsnippet

snippet an "assertIsNone"
self.assertIsNone($1)
endsnippet

snippet ann "assertIsNotNone"
self.assertIsNotNone($1)
endsnippet

snippet ar "assertRegexpMatches"
self.assertRegexpMatches($1, r'${2:pattern}')
endsnippet

snippet at "assertTemplateUsed"
self.assertTemplateUsed(res, '${1:path}.html')
endsnippet

snippet asc "assert status_code"
self.assertEqual(${2:res.status_code}, ${1:200})
endsnippet

snippet ac "assertContains"
self.assertContains(${2:res}, '$1')
endsnippet
