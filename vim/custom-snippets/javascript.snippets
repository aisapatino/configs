# options: by default, only expands if at beginning of line or after whitespace
#	b = beginning of line only
#	w = word boundary (can be adjacent to non-word, non-whitespace chars)
#	i = inword expansion allowed
#	s = trim trailing whitespace before going to next line
# 			(useful when there are optional params after a tab)
#-----------------------------------------------------------------------------
# GENERAL
#-----------------------------------------------------------------------------

snippet strict "use strict statement" bs
'use strict';
endsnippet

snippet pf "prototype function" ws
prototype.${1:FUNC_NAME} = function $1(${2:PARAMS}) {

};

endsnippet

snippet of "object function" ws
${1:FUNC_NAME} = function $1(${2:PARAMS}) {

};

endsnippet

snippet fa "function with params" ws
function(${1}) {
	${2}
})
endsnippet

# same as above, but with semicolon
snippet func "function with params" ws
function(${1}) {
	${2}
});
endsnippet

snippet f "anonymous function no args" ws
function() {
	${1}
});
endsnippet

snippet co "console.log" ws
console.log(${1});
endsnippet

snippet con "console.log with quotes" ws
console.log('${1}');
endsnippet

#-----------------------------------------------------------------------------
# NODE
#-----------------------------------------------------------------------------

snippet req "generic require" s
var $1 = require('${1:MODULE}');
endsnippet

#-----------------------------------------------------------------------------
# TESTING
#-----------------------------------------------------------------------------

# mocha

snippet desc "skeleton for describe wrapper" s
describe('${1:SUITE DESC}', function() {
	${2}
});
endsnippet

snippet suite "skeleton for suite wrapper" s
suite('${1:SUITE DESC}', function() {
	${2}
});
endsnippet

snippet test "skeleton for single test" s
test('${1:TEST DESC}', function(done) {
	${2}
});

endsnippet

snippet it "skeleton for single it" s
it('should ${1:TEST DESC}', function(done) {
	${2}
});

endsnippet

# supertest-as-promised

snippet treq "test request" s
request.${1:get}('${2:URL}')
	.expect(${3:200})
	.then(function(res) {
		${4}
	})
	.catch(done);
endsnippet

# chai bdd

snippet exp "expect" s
expect(${1:VAR}).to.${2:ETC};
endsnippet

snippet ep "expect property"
expect(${1:OBJ}).to.have.property('${2:PROP}'${3});
endsnippet

snippet epp "expect property that is a..."
expect(${1:OBJ}).to.have.property('${2:PROP}'${3}).that.is.a${4}('${5}');
endsnippet

snippet et "expect type" s
expect(${1}).to.be.a${2}('${3}')${4};
endsnippet

# nock

snippet nock "nock outline" sw
nock
	.${1:METHOD}('/${2:URL}')
	.reply(${3:200}, ${4:DATA});
endsnippet

#------------------------------------------------------------------------------
# BACKBONE & MARIONETTE
#------------------------------------------------------------------------------

snippet model "outline for backbone model"

endsnippet

snippet coll "outline of backbone collection"
'use strict';

var assert = require('assert');
var Collection = require('backbone').Collection;

var config = require('../config');

module.exports = Collection.extend({

	url: function() {
	return config.server + ${1:'other/stuff'};
	},

	initialize: function initialize(options) {
	assert(options.providerId, 'options.providerId is required');
	}
});
endsnippet

snippet layout "layoutview"
'use strict';

var assert = require('assert');
var Marionette = require('marionette');

var template = require('templates/${1:TEMPLATE}.jade');

module.exports = Marionette.LayoutView.extend({

	template: template,

	regions: {
	},

	initialize: function initialize(options) {
		// assert required options
		// Create models and collections

		// Create child views
		// call listener setup
	},

	// View events
	// -----------

	onAttach: function onAttach() {
		// this.showChildView('region', view);
	},

	addViewListeners: function addViewListeners() {

	// Collection events
	// -----------------

	addCollectionListeners: function addCollectionListeners() {
	},

	// Private methods
	// ---------------
});
endsnippet

snippet itemview "ItemView"
'use strict';

var assert = require('assert');
var Marionette = require('marionette');

// require model
var template = require('templates/${1:TEMPLATE}.jade');

module.exports = Marionette.ItemView.extend({
	template: template,

	initialize: function initialize(options) {
		assert(options.${2:model}, 'options.$2 is required');
		this.listenTo(this.$2, 'sync', this.render);
		this.$2.fetch();
	},

	// View events
	// -----------
	events: {
	},

	// Template helpers
	// ----------------

	templateHelpers: function templateHelpers() {
		return {};
	}
});
endsnippet
