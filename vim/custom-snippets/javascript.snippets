# default - only expands at beginning of line or after whitespace
# options:
#	 b  beginning of line only (whitespace ok)
#	 w  word boundary (can be adjacent to non-word, non-whitespace chars)
#	 s  trim trailing whitespace before going to next line
# 	  (use if there are optional params after a tab)
# see UltiSnips-snippet-options for more

#------------------------------------------------------------------------------
# GENERAL JAVASCRIPT
#------------------------------------------------------------------------------

snippet str "use strict statement" b
"use strict";
endsnippet

snippet cb "callback (anon func with closing parens)" ws
function (${1}) {
	${2}
});
endsnippet

snippet af "arrow function (as callback)" ws
(${1}) => {
	${2}
});${3}
endsnippet

snippet co "console.log" b
console.log(${1});
endsnippet

snippet con "console.log with quotes" b
console.log("${1}"${2});
endsnippet

#------------------------------------------------------------------------------
# NODE
#------------------------------------------------------------------------------

snippet crm "const require, matching" b
const ${1} = require("$1");
endsnippet

snippet cr "const require (non-matching)" b
const ${1} = require("$2");
endsnippet

snippet req "matching require (var)" b
var ${1} = require('$1');
endsnippet

snippet re "non-matching require (var)" b
var ${1} = require('${2}');
endsnippet

#------------------------------------------------------------------------------
# TESTING
#------------------------------------------------------------------------------

# mocha
# ------

snippet desc "describe wrapper" bs
describe("${1:SUITE DESC}", () => {
	${2}
});
endsnippet

snippet be "beforeEach" b
beforeEach((${1}) => {
	${2}
});

endsnippet

snippet ae "afterEach" b
afterEach((${1}) => {
	${2}
});

endsnippet

snippet it "it wrapper, sync" bs
it("should ${1:TEST DESC}", () => {
	${2}
});

endsnippet

snippet ita "it wrapper, async" bs
it("should ${1:TEST DESC}", function (done) {
	${2}
	done();
});

endsnippet

snippet its "it.skip" bs
it.skip("should ${1:TEST DESC}", function () {
});

endsnippet

snippet tt "test then (with catch done)" ws
then(function (${1:results}) {
	${2}
	done();
})
.catch(done);
endsnippet

# chai bdd
# --------

snippet exp "expect, generic" b
expect(${1:VAR}).to.${2:ETC};
endsnippet

snippet ep "expect property" b
expect(${1}).to.have.property("${2}"${3});
endsnippet

snippet en "expect not (property)" b
expect(${1}).to.not.have.${3}property("${2}");
endsnippet

snippet epd "expect deep property" b
expect(${1}).to.have.deep.property("${2}"${3});
endsnippet

snippet ept "expect property + type" b
expect(${1}).to.have.${5}property("${2}").that.is.a${3}("${4}");
endsnippet

snippet et "expect type" b
expect(${1}).to.be.a${2}("${3}")${4};
endsnippet

#-----------------------------------------------------------------------------
# ESLINT
#-----------------------------------------------------------------------------

snippet dl "disable line" ws
// eslint-disable-line ${1}
endsnippet

snippet dis "eslint disable" b
/* eslint-disable ${1} */
endsnippet

snippet een "eslint enable" b
/* eslint-enable ${1} */
endsnippet
