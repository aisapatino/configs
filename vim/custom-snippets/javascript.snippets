# by default, only expands if at beginning of line or after whitespace
# options:
#	 b  beginning of line only (not after whitespace)
#	 w  word boundary (can be adjacent to non-word, non-whitespace chars)
#	 i  in-word expansion allowed
#	 s  trim trailing whitespace before going to next line
# 	  (useful when there are optional params after a tab)

#------------------------------------------------------------------------------
# GENERAL
#------------------------------------------------------------------------------

# functions
# ---------

snippet str "use strict statement" b
'use strict';
endsnippet

snippet pf "prototype function" ws
prototype.${1:FUNC_NAME} = function $1(${2:PARAMS}) {
	${3}
};

endsnippet

snippet of "object function" ws
${1:FUNC_NAME} = function $1(${2:PARAMS}) {
	${3}
};

endsnippet

snippet fa "function with args" ws
function(${1}) {
	${2}
})
endsnippet

snippet fas "function with args & semicolon" ws
function(${1}) {
	${2}
});
endsnippet

snippet f "anonymous function no args" ws
function() {
	${1}
});
endsnippet

# console logging
# ---------------

snippet co "console.log" w
console.log(${1});
endsnippet

snippet con "console.log with quotes" w
console.log('${1}');
endsnippet

#------------------------------------------------------------------------------
# NODE
#------------------------------------------------------------------------------

snippet req "generic matching require" b
var ${1} = require('$1');
endsnippet

snippet re "generic non-matching require" b
var ${1} = require('${2}');
endsnippet

#------------------------------------------------------------------------------
# TESTING
#------------------------------------------------------------------------------

# mocha
# ------

snippet desc "skeleton for describe wrapper" s
describe('${1:SUITE DESC}', function() {
	${2}
});
endsnippet

snippet be "beforeEach"
beforeEach(function() {
	${1}
});

endsnippet

snippet it "skeleton for single it (with done cb)" s
it('should ${1:TEST DESC}', function(done) {
	${2}
});

endsnippet

snippet its "skeleton for single sync it (without done cb)" s
it('should ${1:TEST DESC}', function() {
	${2}
});

endsnippet

snippet tt "test then (with catch done)" ws
then(function(${1:results}) {
	${2}
	done();
})
.catch(done);
endsnippet

# supertest-as-promised
# ---------------------

snippet tget "test request" s
request.${1:get}('${2:URL}')
	.expect(${3:200})
	.then(function(res) {
		${4}
		done();
	})
	.catch(done);
endsnippet

# chai bdd
# --------

snippet tf "test file - require expect" b
'use strict';

var expect = require('chai').expect;

${1}
endsnippet

snippet exp "expect" s
expect(${1:VAR}).to.${2:ETC};
endsnippet

snippet ep "expect property"
expect(${1}).to.have.property('${2}'${3});
endsnippet

snippet epp "expect property that is a..."
expect(${1}).to.have.property('${2}').that.is.a${3}('${4}');
endsnippet

snippet et "expect type" s
expect(${1}).to.be.a${2}('${3}')${4};
endsnippet

# nock
# -----

snippet nock "nock outline" sw
nock
	.${1:METHOD}('/${2:URL}')
	.reply(${3:200}, ${4:DATA});
endsnippet

#------------------------------------------------------------------------------
# BACKBONE & MARIONETTE
#------------------------------------------------------------------------------

snippet model "outline for Backbone Model"
'use strict';

var Model = require('backbone').Model;

module.exports = Model.extend({

});
endsnippet

# specific to project
snippet coll "outline of Backbone Collection"
'use strict';

var assert = require('assert');
var Collection = require('backbone').Collection;

var config = require('../config');

module.exports = Collection.extend({

	url: function() {
		return config.server + ${1:''};
	},

	initialize: function initialize(options) {
		assert(options.${2:prop}, 'options.$2 is required');
	}
});
endsnippet

snippet layout "LayoutView"
'use strict';

var assert = require('assert');
var LayoutView = require('marionette').LayoutView;

var template = require('templates/${1:TEMPLATE}.jade');

module.exports = LayoutView.extend({

	template: template,

	regions: {${2}},

	// Initialization
	// ---------------

	initialize: function initialize(options) {
		// assert required options
		// create models and collections

		// create child views, call listener setup (or in onAttach)
	},

	onAttach: function onAttach() {
		// this.showChildView('region', view);
	},

	// View events
	// -----------

	addViewListeners: function addViewListeners() {
	},

	// Collection events
	// -----------------

	addCollectionListeners: function addCollectionListeners() {
	},

	// Private methods
	// ---------------
});
endsnippet

snippet iview "Marionette ItemView" bs
'use strict';

var assert = require('assert');
var Marionette = require('marionette');

var template = require('templates/${1:TEMPLATE}.jade');

module.exports = Marionette.ItemView.extend({
	template: template,

	initialize: function initialize(options) {
		assert(options.${2:model}, 'options.$2 is required');
		this.listenTo(this.$2, 'sync', this.render);
		this.$2.fetch();
	},

	// View events
	// -----------
	events: {
	},

	// Template helpers
	// ----------------

	templateHelpers: function templateHelpers() {
		return {};
	}
});
endsnippet

#-----------------------------------------------------------------------------
# JSDOC
#-----------------------------------------------------------------------------

snippet param "@param" ws
@param {${1:TYPE}} ${2:NAME} - ${3:DESC}
endsnippet

#-----------------------------------------------------------------------------
# ESLINT
#-----------------------------------------------------------------------------

snippet dl "disable line" ws
// eslint-disable-line ${1}
endsnippet

snippet dis "eslint disable"
/* eslint-disable ${1} */
endsnippet

snippet en "eslint enable"
/* eslint-enable ${1} */
endsnippet
