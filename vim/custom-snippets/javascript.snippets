# options: by default, only expands if at beginning of line or after whitespace
#   b = beginning of line only
#   w = word boundary (can be adjacent to non-word, non-whitespace chars)
#   i = inword expansion allowed

#   s = trim trailing whitespace before going to next line
# 			(useful when there are optional params after a tab)
#-----------------------------------------------------------------------------
# GENERAL
#-----------------------------------------------------------------------------

snippet strict "use strict statement" bs
'use strict';
endsnippet

snippet pf "prototype function" ws
prototype.${1:FUNC_NAME} = function $1(${2:PARAMS}) {

};

endsnippet

snippet func "function with params" ws
function(${1}) {
	${2}
});
endsnippet

snippet f "anonymous function" ws
function() {
	${1}
});
endsnippet

snippet con "console.log" ws
console.log('${1}');
endsnippet

snippet err "new Error" ws
err = new Error('${1:MSG}');
endsnippet

snippet ife "if err throw err" ws
if (err) {
	throw err;
}
endsnippet

#-----------------------------------------------------------------------------
# NODE
#-----------------------------------------------------------------------------

snippet req "generic require" s
var $1 = require('${1:MODULE}');
endsnippet

snippet ex "most basic express outline" s
var express = require('express');

var app = express();

app.listen(3000);

endsnippet

snippet hserver "http.createServer" s
var server = http.createServer(function(request, response) {
	${2}
});
server.listen(${1:PORT});
console.log('Server is running on $1');
endsnippet

snippet xget "app.get" s
app.get('${1:PATH}', function(request, response) {
	${2}
});
endsnippet

snippet xpost "app.post" s
app.get('${1:PATH}', function(request, response) {
	${2}
});
endsnippet

#-----------------------------------------------------------------------------
# TESTING - mocha, chai, superagent
#-----------------------------------------------------------------------------

snippet desc "skeleton for describe wrapper" s
describe('${1:TEST SUITE DESCRIPTION}', function() {
});
endsnippet

snippet suite "skeleton for suite wrapper" s
suite('${1:SUITE DESC}', function() {
});
endsnippet

snippet test "skeleton for single test" s
test('${1:TEST DESC}', function(done) {
});
endsnippet

snippet it "skeleton for single test" s
it('should ${1:TEST DESC}', function(done) {
});

endsnippet

snippet expr "expect request" s
.expect(${1:status}, function(err, res) {
	if (err) {
		throw err;
	}
	${2}
});
endsnippet

snippet exp "expect" s
expect(${1:VAR}).to.${2:ETC};
endsnippet

snippet exprop "expect property"
expect(${1:OBJ}).to.have.property('${2:PROP}');
endsnippet

snippet experr "expect sync error"
expect(res.body).to.have.property('code', ${1:CODE});
expect(res.body).to.have.property('message', '${2:MSG}');
done();
endsnippet

#-----------------------------------------------------------------------------
# WHEN
#-----------------------------------------------------------------------------

snippet ca "catch" ws
catch(function(err) {
	logger.error('Error: ' + err);
	return when.reject(err);
});
endsnippet

