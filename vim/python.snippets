# VIEWS

snippet impv "common view imports" b
from django.contrib import messages
from django.contrib.auth.decorators import login_required
from django.http import HttpResponse
from django.shortcuts import redirect, render

from tracker import constants

import logging
logger = logging.getLogger('tracker')
endsnippet

snippet view "basic view outline" b
@login_required(login_url = constants.LOGIN_URL)
def ${1:viewname}(request):

  if request.method=='POST':


  return render(request, '', {})


endsnippet

# MODELS

snippet model "basic class outline" b
class ${1:CLASSNAME}(models.Model):


  def __unicode__(self):
    return self.${2:FIELDNAME}
endsnippet

snippet fk "foreignkey"
  ${1:FIELD} = models.ForeignKey(${2:MODEL})

endsnippet

snippet pos "positiveintegerfield"
  ${1:FIELD} = models.PositiveIntegerField(default=0)

endsnippet

snippet bool "booleanfield"
  ${1:FIELD} = models.BooleanField(blank=True, default=False)

endsnippet

snippet many "manytomanyfield"
  ${1:FIELD} = models.ManyToManyField(${2:MODEL}, through='${3:THROUGH}', blank=True)

endsnippet

# FORMS

snippet mform "modelform outline"
class ${1:MODEL}Form(forms.ModelForm):

  class Meta:
    model = $1
    exclude = []


endsnippet

# TRACKER SPECIFIC

# resilience fields
snippet resilf "insert resilience model fields"
  physical = models.PositiveIntegerField(default=0)
  emotional = models.PositiveIntegerField(default=0)
  social = models.PositiveIntegerField(default=0)
  mental = models.PositiveIntegerField(default=0)
endsnippet

