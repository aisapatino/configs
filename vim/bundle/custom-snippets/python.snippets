snippet log "logger defining"
import logging
logger = logging.getLogger('${1:NAME}')

endsnippet

# VIEWS

snippet impv "common view imports" b
from django.contrib import messages
from django.contrib.auth.decorators import login_required
from django.http import HttpResponse
from django.shortcuts import redirect, render

from tracker import constants

import logging
logger = logging.getLogger('tracker')
endsnippet

snippet view "basic view outline" b
@login_required(login_url = constants.LOGIN_URL)
def ${1:viewname}(request):

  if request.method == 'POST':


  return render(request, '', {})


endsnippet

snippet fdoc "docstring outline for a function"
""" ${1:SUMMARY}

Args:

Returns:

Raises:

"""

endsnippet

# MODELS/CLASSES

snippet model "basic model outline" b
class ${1:CLASSNAME}(models.Model):


  def __unicode__(self):
    return self.${2:FIELDNAME}
endsnippet

snippet cdoc "docstring outline for a class"
""" ${1:SUMMARY}

${2:LONGER_INFO}
"""

endsnippet

snippet fk "foreignkey"
  ${1:FIELD} = models.ForeignKey(${2:MODEL})

endsnippet

snippet pos "positiveintegerfield"
  ${1:FIELD} = models.PositiveIntegerField(default=0)

endsnippet

snippet bool "booleanfield"
  ${1:FIELD} = models.BooleanField(blank=True, default=False)

endsnippet

snippet many "manytomanyfield"
  ${1:FIELD} = models.ManyToManyField(${2:MODEL}, through='${3:THROUGH}', blank=True)

endsnippet

snippet datef "datetimefield"
  ${1:FIELD} = models.DateTimeField()

endsnippet

# resilience fields
snippet resilf "insert resilience model fields"
  physical = models.PositiveIntegerField(default=0)
  emotional = models.PositiveIntegerField(default=0)
  social = models.PositiveIntegerField(default=0)
  mental = models.PositiveIntegerField(default=0)
endsnippet

# FORMS

snippet mform "modelform outline"
class ${1:MODEL}Form(forms.ModelForm):

  class Meta:
    model = $1
    exclude = []


endsnippet

# ADMIN

snippet madmin "model admin outline"
class ${1:MODEL_NAME}A(admin.ModelAdmin):
  list_display = ()
  list_filter = ()
  exclude = ()
  fields = ()
  readonly_fields = ()

endsnippet

# TESTS

snippet timp "common test imports"
from django.core.urlresolvers import reverse

import unittest

from ${1:BASE_APP}.tests import ${2:BASE_TEST_CLASS}

${3:APP}_FIXTURE = '${4:PATH}'

endsnippet

snippet ctest "outline of a test class" b
class ${1:NAME}(${2:BASE}):
  """ ${3:SUMMARY} """

  fixtures = [${4:FIXTURE}]
  url = reverse('${5:VIEW}')
  template_success = '${6:NAME}'
  template_error = '${7:NAME}'

  def setUp(self):
    super($1, self).setUp()

endsnippet

snippet test "outline of a text func"
def test_${1:DESC}(self):
  """ Verify ${2:VERIFY_WHAT}

  Setup:
    ${3:SETUP}

  Asserts:
    ${4:ASSERTIONS}
  """

endsnippet

snippet tdoc "docstring for test method"
""" Verify ${1:VERIFY_WHAT}

Setup:
  ${2:SETUP}

Asserts:
  ${3:ASSERTIONS}
"""

endsnippet

snippet tidea "placeholder for future test"
@unittest.skip('Incomplete')
def test_${1:DESC}(self):
  pass

endsnippet
