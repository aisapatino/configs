# Base config - common to linux & osx. Sourced by the other specific bashrc files

# Settings
#----------

HISTCONTROL=ignoreboth         # ignore duplicates & commands starting with space
HISTIGNORE="ls:ll:gs:gd:cd *:g s*"  # ignore frequent short commands
HISTSIZE=1000                  # double the default
shopt -s histappend            # add to existing history instead of overwriting

shopt -s cdable_vars           # cd using vars without having to include $

export EDITOR=vim
export VISUAL=$EDITOR
set -o vi

# Colors
#--------

export TERM=xterm-256color
export CLICOLOR=1

# Prompt
#--------

GIT_PS1_SHOWUPSTREAM=1        # indicate ahead/behind upstream
GIT_PS1_SHOWDIRTYSTATE=1      # indicate staged & unstaged changed
GIT_PS1_SHOWUNTRACKEDFILES=1
GIT_PS1_STATESEPARATOR=""     # prevent space between branch & status indicators
GIT_PS1_SHOWCOLORHINTS=1      # color like git status for untracked/modified

source ~/.git-prompt.sh

add_virtual_env() {
  if [ "$VIRTUAL_ENV" ] ; then
    export PS1="`basename \"$VIRTUAL_ENV\"` $PS1"
  fi
}
PROMPT_COMMAND='__git_ps1 "\[\e[1;34m\]\w\[\e[m\]" " \m " ; add_virtual_env'

# Autocomplete
#--------------

if [ -f ~/.git-completion.bash ]; then
  . ~/.git-completion.bash
fi

# Autocomplete for 'g' as well
complete -o default -o nospace -F _git g

# Aliases
#---------

alias ag="ag --hidden"
alias ll="ls -la"
alias f="find . -not -path \"*node_modules*\" -iname"
alias fa="find . -iname"                 # see function ff() for specifying dir

alias g="git"
alias gs="git status"
alias gd="git diff"
alias gk="gitk --all"

alias npmlist="npm ls --depth=0"

base_tree="tree -a -C -I 'node_modules|.git|bower_components|coverage|.DS_Store|*.pyc'"
alias t="$base_tree --dirsfirst -L "
alias trd="$base_tree -d"

# Custom functions
#------------------

# Replace across files. Usage: sr <pattern> <replacement> "<filepattern>"
sr() {
  echo "replacing '$1' with '$2' in files matching '$3'"
  echo "(if the file match looks wrong, make sure you put quotes around it)"
  if [ "$1" ] && [ "$2" ] && [ "$3" ] ; then
    find . -iname "$3" -print0 | xargs -0 gsed -i s/"$1"/"$2"/g
  else
    echo "missing arguments"
  fi
}

# Find file in specified dir. Usage: ff <pathtosearch> "<pattern>"
# Example: ff ../frontend "*.png"
ff() {
  find "$1" -iname "$2"
}

# List local git branches with corresponding remotes and status.
# Strips sha and commit subject from git branch -vv
# Example input: * master      bbea826 [origin/master: ahead 12] update res serializer test
#        output: * master      [origin/master: ahead 12]
br() {
  git branch -vv --color | gsed -r "s/(.*\x1B\[m\ )[a-z0-9]{7}\ (\[.*\])?.*/\1\2/" | sed s/gone/`printf "\033[35mGONE\033[0m"`/g
}

# Load check_statuses function
source "$HOME/Projects/configs/git/check_statuses.sh"

# vim: syntax=sh
